‘\’开头，命令
‘%’开头，注释
‘{}’命令参数
‘[]’ 选项

\documentclass表示的是这个文档的文类(document class)。所谓文类，是指一套预设的排版格式，常见的（英文文类）有 article，report，book 等等。它们
之间有一些微妙的差别，比如 book 文类就为了适应书籍的装订，为奇数页和偶数页安排了不同的左右边距；report 和 article 非常相似，但 report 中可以使
用更多的章节等级，article 则是几乎最简单的一种。

‘\\’换行不换段，等价\newline
连续两个换行符是换段。

“\LaTeX”表示 LaTeX 的 logo，直接使用即可。

在文类的定义之后就是正文部分，每个文档的正文部分都必须在\begin{document}和\end{document}之间。这一对命令组成了一个环境(environment)，在不
同的环境当中，文本会有不同的格式预设。document 环境是最基本的环境，第3行和第6行之间还有一个 center 环境，这一环境的预设就是其中的内容全部
以居中的方式进行排版。常用的环境有很多，例如 equation 环境用于排版公式，figure 环境用于排版图片，itemize 环境表示无序列表，enumerate 环境表示
有序列表。如果需要修饰enumerate，则需要加载 \usepackage{enumerate}，然后在enumerate[]中填入相应参数

导言区是文类定义之后，正文开始之前的部分。它的主要作用是对文档的性质做一些设置，或者自定义一些命令。

导言区的作用之一是设置文档性质。所谓文档的性质有许多方面，比如设定标题、作者、日期、图题格式、表题格式等。其中还一个非常重要的作用就是添
加宏包(package)。宏包可以被理解为一些模块，它们提供 LaTeX 本身没有的命令，以实现一些原本不太好实现的效果。比如 ctex 宏包就是一个把文档格式
全部中文化的宏包，并提供 ctexart，ctexrep，ctexbook 等与 article，report，book 相对应的文类，方便排版中文文档。

\title：设置文档标题；有一个参数，用大括号跟在后面，表示标题内容；
\author：设置文档作者；一个参数；
\date：设置日期；其中\today表示系统当天日期，也可以手动输入；留空的话则不排版日期；
\usepackage：调用宏包；此处调用的宏包是 lipsum，用于生成随机文字（上面满篇的洋文其实都是生成的）；第10行的 \lipsum[1-2] 表示插入随机文字的前
两段；
 \maketitle：这是这5个命令中唯一一个写在正文区的命令，排版标题；这个命令如果不使用，之前设置的标题、作者、日期都是不会出现在成品中的；使它
之后会排版标题、作者和日期。

LaTeX 提供了10个命令来声明文字的大小，由小到大分别是：

    \tiny

    \scriptsize

    \footnotesize

    \small

    \normalsize

    \large

    \Large

    \LARGE

    \huge

    \Huge
	
那么如果想要指定字号怎么办呢？老师让我们用五号字来写论文，应该怎么办？这时我们就可以用 ctexart 自带的一个参数 c5size 来处理，用法是在文类定义
处做一些修改

假如想指定字号，而我们熟悉的又是汉字的字号系统（小四、五号之类），我们就可以用 ctex 为我们提供的字号指定命令，用法和前面的命令相同，下面举
一些例子大家就明白了：

    小五：\zihao{-5}

    六号：\zihao{6}

    初号：\zihao{0}

    小四：\zihao{-4}
	
字体族(font family)，字体形状(font shape)和字体系列(font series)

脚注。脚注的命令是 \footnote{脚注内容}，只要跟在需要注的文字后面，就可以在那一页底部产生一个脚注。

强调。\emph{强调内容}，效果是用 italic 形状排版这些文字。

修改行距。在导言区使用 \linespread{倍数}，可将全文的行距进行调整。默认情况下采用的是基本行距，这一行距指的是从上一行的基线到下一行的基线之
间的距离，而不是每一行底部到下一行顶部的距离。

靠左、靠右、居中。这三个命令都是针对段落的，首先要把需要处理的段落用大括号括起来，然后在开头加上 \raggedright，\raggedleft 和 \centering，分别
对应靠左、靠右、居中。

一个是计数列表，一个是无序列表。计数列表的环境名称是 enumerate，无序列表的环境名称是 itemize。
这两个环境都用 \item 作为新的一行的开始。如果要多级列表的话在里面再包裹一个环境就行了。

在 ctexart/article 文类中，LaTeX 提供了如下的小标题级别和对应的命令：
    section（\section{节标题}）
    subsection（\subsection{小节标题}）
    subsubsection（\subsubsection{小小节标题}）
    paragraph（\paragraph{段落标题}）
    subparagraph（\subparagraph{小段落标题}）
其中前三个级别是有编号的，后两个则没有编号
编译的过程中， 引擎会自动为这个节标题进行编号。

在编制目录的时候（下期会讲到），我们有时候不希望给某一节编号，也不想它进入目录。这个时候只需要在命令后加上一个星号(*)就可以了，比如
 \section*{不编目的小节}。
 
在 ctexrep/report 和 ctexbook/book 文类中，会有更高的音节级别，比如 part，chapter 之类。chapter 在学术论文的写作中还算常用，比 section 高一个级别
，如果篇幅比较大的话可以更有效地组织文档。写作学术论文的时候一般会有模板可以使用，这时只要按照模板的说明操作就可以了，这里列出仅供参考。

在行文过程中，我们可能需要引用自己前面写过的结果，我们可以用标签(label)和交叉引用(cross reference)来解决这个问题。
标签和交叉引用的基本思路是这样的。首先把我需要引用的章节用 \label{标签名称} 进行标记，然后在需要引用它的时候用 \ref{标签名称} 进行引用。这样一
来，引擎在进行编译的时候就需要编译两次：第一次生成所有章节的编号，第二次再把这些编号填充到相应的位置。所以如果使用了这个命令但只编译了一
次，这些引用的地方都将显示为问号。这对所有交叉引用都是一样的。道理很简单，引擎每编译一次就把整个源码读一遍，而只读一遍是没有办法知道被引
用的章节编号是多少的（尤其是在前面引用后面的章节）。所以引擎在读第一遍的时候就把需要引用的地方都做上标记，第二次再来处理。

在读到这个引用的时候想跳转到被引用的地方去看一看，可以使用 hyperref 宏包。

说明书，我们称之为文档(documentation)。命令行工具输入“texdoc 宏包名”就可以查阅宏包的文档，里面有详细的使用说明

制作目录，\tableofcontents。这个命令放在哪里，目录就会出现在哪里。和交叉引用相同的一个特点是，目录的排版也需要两次编译。一方面是因为其中涉
及到页码，另一方面是涉及到各个章节的标题。目录的内容显示为红色，是因为 hyperref 宏包的 colorlinks 选项，说明这些红色的文字都是可以点击跳转的。
\section 命令和小节标题之间加入了一个用方括号括起来的参数，这个就是显示在目录中的标题。目录对于图表而言也是可以用的。对应的命令是
 \listoffigures 和 \listoftables。它会收集对应图表中的标题来产生图表的目录。目录单独占一页，只需要在 \tableofcontents 后面加上 \newpage 命令。
 
 认情况下，目录的深度是3级。如果结构用到了 paragraph 一级，那么它将不会被编入目录中。但可以在导言区指定目录深度，命令是
 \setcounter{secnumdepth}{4}，\setcounter{tocdepth}{4}，4为目录深度
 
 \section*可以生成一个不编号也不编目的小节，\addcontentsline 生成编目但不编号的小节，\addcontentsline{目录种类}{编目级别}{目录内容}
 
 \ctexset 命令来对某个级别的标题的某个属性进行设置
 
 标题的级别由高到低有以下七种：

    part
    chapter
    section
    subsection
    subsubsection
    paragraph
    subparagraph

其中需要注意，article 没有前两个级别的章节，对它们进行设置是没有作用的。可以定制的属性有如下几种：

    numbering，控制是否编号。
    name，设置章节的名字。名字可以分为前后两部分，即章节编号前后的词语，两个词之间用一个半角逗号分开;也可以只有一部分，表示只有章节编号之
				前的名字。
    number，设置章节编号的数字输出格式。
    format，控制章节标题的全局格式，作用域为章节名字和随后的标题内容。可以用于 控制章节标题的对齐方式、整体字体字号等格式。
    nameformat，控制章节名字的格式，作用域为章节名字，包括编号。
    numberformat，选项用于控制章节编号的格式，作用域仅为编号数字本身。
    aftername，在控制章节编号与标题内容之间的距离，或者控制标题是否另起一行。
    titleformat，控制标题内容的格式，作用域为章节标题内容
	
\raggedrigh，标题靠左。其他同理

geometry 宏包定制版心，\usepackage[left=1cm,right=1cm,top=2cm,bottom=3cm]{geometry} 

\pagestyle 命令可以调用三种默认的页面风格：    
	plain：只有页底中央的页码；
    empty：啥也没有；
    headings：把章节的标题写在页眉处，同时有页码；

深度定制各种页眉页脚，可以使用 fancyhdr 宏包

对于最基本的行间公式，可以用 “\[” 和 “\]” 包围起来实现。对于行文中出现的行内公式，我们用两个“$”来把公式的内容包起来
在公式环境中加入文字，要把文字用 \text{公式中的文字} 来表示（需要调用 amsmath 宏包），这样就会正常地排版文字。

 equation 环境来排版带编号的公式。公式可以加上标签来进行交叉引用，打标签的方法和引用章节相同，引用的时候则需要用 \eqref 命令

在数学模式下，用“_”表示下标，用“^”表示上标。如果上标或下标的内容多于一个字符，需要用大括号括起来。

对于求和符号等大型运算符，它们的上下标通常在符号的正上方和正下方。如果对积分这样的运算符（一般上下标都在右上角和右下角）需要手动把上下标
移动到正下方或正上方的话，需要用 \limits 命令。

排版分式使用的命令是 \frac{分子}{分母}。如果分子或者分母只有一个字符，也可以省略大括号

排版括号时，使用\left+括号类型，如加左中括号为\left[

排版根式的基本命令是 \sqrt 。将被开方的式子作为它的参数就可以了。另外这个命令还可以有一个选项，表示开几次方。

amsmath 宏包为我们提供了多个排版矩阵的环境，其区别主要是用什么包围矩阵。列举如下：
    matrix：无
    bmatrix：方括号
    vmatrix：竖线
    pmatrix：圆括号
    Bmatrix：花括号
    Vmatrix：双竖线
在排版矩阵中的元素时，需要用 & 符号作为对齐的标志，并用 \\ 表示换行。

在数学公式中，只有变量才使用意大利体。而数学常数 e、i，微分符号 d，函数名 sin、cos、log、ln 等都需要用罗马正体来表示。另外表示数集的字母
 R、C、Q、N 等，需要用空心字体来表示。

对应的大写字母只需要将读音的首字母大写即可，比如用 \alpha 输入 α，用 \beta 输入 β 等
 
特殊符号：
	普朗克常数，\hbar
	无穷符号，\infty
	空集符号，\emptyset（也可以调用 amssymb 宏包后使用 \varnothing）
	偏微分符号，\partial
	积分符号，\int，\iint，\iiint，\iiiint，分别对应一重、二重、三重、四重积分；更多重积分可以用 \idotsint
	环路积分符号，\oint
	求和符号，\sum
	求积符号，\prod
	交集符号，\cap；并集符号，\cup
	乘号，\times；除号，\div
	不等号，\neq；小于等于，\leq；大于等于，\geq；
	属于，\in；
	
如果是简单的多个公式的堆积，我们可以用 gather 和 align 环境。gather 环境中，所有的公式都是居中的；而 align 环境可以用 & 符号指定位置对齐
（比如按等号对齐）。两个环境都默认编号。

一个公式拆分成多行来书写，并给出一个单独的编号，需要split 环境。split 环境需要嵌套在 equation 环境中使用。

多个公式组合成一个大的公式，需要用到 cases 环境。
cases 环境有一个重大的缺陷，就是在每个 case 中，公式都会被变成行内公式。所以在这里我们用 \dfrac 命令来强制让分式变成行间公式。如果我们想
简单地解决这个问题，就需要使用 mathtools 宏包定义的 dcases 环境，用法和 cases 完全相同，但是可以以行间公式的形式来排版每个 case。

tabular 和 array 环境，它们的功能几乎没有差别，也包含了排版表格的核心技术。
 
列格式说明的基本元素有 l c r 三种，分别表示这一列是靠左、居中还是靠右对齐。在左右两端或基本元素之间可以加上竖线，表示这里是不是需要用线
来分隔。

列格式中还有一些其他的说明符，在此也列举如下：
    p{<宽度>}，表示本列具有固定的宽度，表格内容在其中可以自动换行（但不能手动用 \\ 进行换行），并可以用 \raggedleft，\centering 等命令进行对齐。
    @{<内容>}，添加任意内容，不占表项计数，同时取消表列间的距离。例如我们需要某一列的数据按小数点对齐，就可以用 r@{.}l 这样定义两列，分别
							输入整数部分和小数部分，实现这个效果。
    *{<计数>}{<列格式说明>}，将部分列格式说明重复多次。

横线进行分隔（\hline），\cline{x-y} 可以获得一段从第 x 格到第 y 格的横线。

垂直对齐选项表示在行内使用时，表格的哪一部分与文字对齐，其参数可以是 t 或者 b，默认条件是居中对齐。

表格单元进行合并，使用 \multicolumn 命令。\multicolumn{<项数>}{<列格式说明>}{<内容>}
合并列，则需要用 multirow 宏包提供的 \multirow 命令，其使用方式如下：
	\multirow{<行数>}{<宽度>}{<内容>}
	\multirow{<行数>}*{<内容>}
	
有的时候我们需要制作的表格，用一整张纸都装不下。这样的话我们在新的一页上需要重新排版一个表头，同时在页面接续处需要有一些文字来说明这个表
格是跨页排版的。这个时候我们就需要 longtable 宏包中提供的 longtable 环境。
	\begin{longtable}[<水平对齐项>]{<列格式说明>}
	<第一页表头>
	\endfirsthead
	<接续处表头>
	\endhead
	<页面连接处表尾>
	\endfoot
	<最后一页表尾>
	\endlastfoot
	<内容>
	\end{longtable}
具体查阅文档。

三线表。这样的表格只在顶部、底部和表头下方有三条分隔线，其中顶部和底部的线较粗，表头下方的线较细。这样的线条可以用 booktabs 宏包提供的如
下四种命令来实现：
    \toprule：画顶部的线
    \midrule：画表头下方的线
    \bottomrule：画底部的线
    \cmidrule：与 \cline 命令类似，可以画出一段短线，它比 \midrule 更细；配合 \morecmidrules 命令可以画出多条分隔线，并且其间有合适的间距

booktabs 宏包没有提供单独的表格环境，只需要在普通的表格中插入新定义的线条即可。

插入一张图片的核心命令是\includegraphics[<选项>]{<文件名>}，插图时一般都需要调用 graphicx 宏包。

图形文件一般和 .tex 源文件在同一目录下，因此可以直接写文件名插入。

graphicx 宏包提供的 \graphicspath 命令可以图片文件夹。指定后，所有图片的搜索都将在这个文件夹中进行。

插入的图片可以指定大小，只要在 \includegraphics 命令中的选项中指定即可。例如\includegraphics[width=\textwidth]{pic}

Latex在排版的时候，如果当前位置放不下图表，那就先排版后面的内容，再在后面找合适的地方来放图表。针对图片和表格，LaTeX 提供了 figure 和 table 
两种环境，不仅可以实现浮动，还可以分别编号并生成目录。例如，
	\begin{figure}[<浮动位置>]
	\includegraphics[<选项>]{<文件名>}
	\caption{<图标题>}
	\label{<标签>}
	\end{figure}

	\begin{table}[<浮动位置>]
	\caption{<表标题>}
	\label{<标签>}
	\begin{tabular}{<列对齐说明>}
	...
	\end{tabular}
	\end{table}
浮动位置有如下四种：
    h：here，表示放置在当前位置
    t：top，表示放置在某页顶部
    b：bottom，表示放置在某页底部
    p：page，表示独占一页
这四种说明符可以组合使用，优先级递降。
图表的标题用 \caption 命令来指定。图表标题格式的控制可以使用 caption 宏包来实现。

\subcaptionbox{<子图(表)标题>}{<子图(表)内容>} 命令去插入子图或者子表，minipage也可以。

LaTeX 处理参考文献的逻辑是这样的。首先作者需要维护一个文献数据库，然后为每一篇文献加上标题、作者、年份、期刊名、哪一卷等信息，最重要的是
给它一个独特的标签。在行文过程中，作者只需要像做交叉引用一样用一定的命令 (\cite) 去引用这个标签，LaTeX 的引擎 BibTeX 就会去查找数据库中对应
的信息，然后生成引用，并在文末加上完整的文献条目。

BibTeX 是专门用于处理参考文献的引擎。在首次编译的过程中，你使用的编译引擎（例如 XeLaTeX）会找到所有文献标签，这时文献的标签都没有对应的信
息，因为 XeLaTeX 并不负责处理文献，只是把它存储在 .aux 文件中。在第一次编译完成后，BibTeX 就该上场了。它会在 .aux 文件中把这些标签收集起来，
在文献数据库中查找信息，调用对应的格式，并生成一个后缀为“.bbl”的文献列表。当 XeLaTeX 再回来编译时，就会把文献列表添加在文档的末尾，但文
中的引用还没有完成。最后再用 XeLaTeX 编译一次，就可以得到成品了。因此总的流程就是：
    XeLaTeX -> BibTeX -> XeLaTeX -> XeLaTeX
	
BibTeX 调用格式的时候，其实是读取对应样式的 .bst 文件，依据这个文件生成内容。如果投稿的期刊有特殊的要求，只需要下载他们提供的 .bst 文件，然后
用 \bibliographystyle 命令设置格式就好了

排版参考文献有几个比较重要的命令：
    \bibliographystyle{<样式名>}，定义文献引用格式，在导言区使用；
    \cite{<标签>} 系列命令，在行文中使用；依据需求不同会有不同的命令；
    \bibliography{<文献数据库名>}，在排版参考文献处使用，添加文献列表；
	
    \cite{<key>}：（作者，年份）
    \citeA{<key>}：作者（年份）
    \citeauthor{<key>}：作者
    \citeyearNP{<key>}：年份（NP后缀表示 no parentheses，没有括号）
	
参考文献本身也是一个 section，它的标题是 References。如果想改动，只需要在正文中使用如下命令\renewcommand{\refname}{参考文献}。如果论文模板
中，参考文献是以 chapter 级别呈现的，那么把 \refname 改为 \bibname 套回上面的命令中即可。

vspace，hspace分别代表垂直间距，水平间距。

lstlisting 代码环境，用于插入代码

proposition 定理类环境

\def 定义宏，在实际调用时展开

\foreach 参考python